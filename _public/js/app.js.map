{"version":3,"file":"_public/js/app.js","sources":["app/scripts/app.js","app/scripts/controllers/HomeCtrl.js","app/scripts/directives.js","app/scripts/filters.js","app/scripts/services.js"],"names":[],"mappingsxvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCPA;AACA;AACA;AACA","sourcesContent":["'use strict';\n\n// Declare app level module which depends on filters, and services\nvar mattliving = angular.module('mattliving', ['mattlivingFilters', 'mattlivingServices', 'mattlivingDirectives', 'ngResource', 'ngRoute'])\n  .config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {\n    $routeProvider.when('/', {\n      templateUrl: 'partials/home.html',\n      controller: \"HomeCtrl\"\n    })\n    .otherwise({redirectTo: '/'});\n    return $locationProvider.html5Mode(true);\n  }]);","angular.module('mattliving').controller('HomeCtrl', function($scope) {\n\n    // each view can be in one of three states - panel, list or content\n    $scope.views = {\n        middle: \"panel\",\n        top: \"panel\",\n        bottom: \"panel\",\n        left: \"panel\",\n        right: \"panel\"\n    };\n\n    $scope.projects = [\n        {\n            name: 'Climbr',\n            src: 'https://github.com/mattliving/Climbr'\n        },\n        {\n            name: 'pathD3',\n            src: 'https://github.com/mattliving/pathD3'\n        },\n        {\n            name: 'Membattles',\n            src: 'https://github.com/mattliving/membattles'\n        },\n        {\n            name: 'ngDashboard',\n            src: 'https://github.com/mattliving/ngdashboard'\n        }\n    ];\n\n    $scope.photoSets = [\n        {\n            name: 'Birding',\n            img: 'img/eagle_owl.jpg'\n        },\n        {\n            name: 'Japanese Sword',\n            img: 'img/sword.jpg'\n        },\n        {\n            name: 'Photography',\n            img: 'img/kensington_gardens.jpg'\n        },\n        {\n            name: 'Skiing',\n            img: 'img/fernie.jpg'\n        }\n    ];\n\n    // reset all views to base state\n    $scope.resetViews = function() {\n        _.forIn($scope.views, function(value, key) {\n            $scope.views[key] = \"panel\";\n        });\n    }\n\n    // switch a view into a new state\n    $scope.switchView = function(view, state) {\n        if (typeof state !== \"undefined\") {\n            $scope.views[view] = state;\n        }\n        else {\n            if ($scope.views[view] === \"panel\") {\n                $scope.views[view] = \"list\";\n            }\n        }\n        // $scope.currentView[view] = ($scope.currentView[view] === \"false\" ? \"true\" : \"false\");\n    }\n\n    $scope.$on(\"list:li:active\", function(event, item, position) {\n        if (position === \"left\") {\n            $scope.switchView(\"right\", \"content\");\n        }\n        else if (position === \"right\") {\n            $scope.switchView(\"left\", \"content\");\n        }\n        event.stopPropagation();\n    });\n\n    $scope.$on(\"list:li:inactive\", function(event, item, position) {\n        if (position === \"left\") {\n            $scope.switchView(\"right\", \"panel\");\n        }\n        else if (position === \"right\") {\n            $scope.switchView(\"left\", \"panel\");\n        }\n        event.stopPropagation();\n    });\n});","/* Directives */\nvar directives = angular.module('mattlivingDirectives', []);\n\ndirectives.directive('panel', function() {\n    return {\n        restrict: 'EA',\n        templateUrl: 'partials/panel.html',\n        replace: true,\n        transclude: true,\n        scope: {\n            state: '=',\n            position: '@',\n            height: '=',\n            width: '='\n        },\n        link: function(scope, elem, attrs, ctrl, transclude) {\n\n            scope.$watch('state', function(newVal, oldVal) {\n                switch (newVal) {\n                    case 'panel':\n                        elem.removeClass(\"two-thirds\");\n                        // elem.removeClass(\"three-quarters\");\n                        break;\n                    case 'list':\n                        elem.removeClass(\"two-thirds\");\n                        // elem.removeClass(\"three-quarters\");\n                        break;\n                    case 'content':\n                        elem.addClass(\"two-thirds\");\n                        // elem.addClass(\"three-quarters\");\n                        break;\n                    default:\n                        break;\n                }\n            });\n\n            // scope.$on('list:li:active', function(event, item, className) {\n            // });\n\n            // scope.$on('list:li:inactive', function(event, item, className) {\n            // });\n        }\n    }\n})\n\ndirectives.directive('list', function() {\n    return {\n        restrict: 'EA',\n        replace: true,\n        templateUrl: '/partials/splitList.html',\n        scope: {\n            items: '=',\n            property: \"@\",\n            height: '='\n        },\n        link: function(scope, elem, attrs) {\n\n            var $li;\n            scope.$watch('height', function(newVal, oldVal) {\n                $li = elem.find('li');\n                $li.height(newVal/$li.length);\n            });\n\n            scope.toggleActive = function(e, item) {\n                var $this = $(e.currentTarget);\n                $li.not($this).removeClass('active');\n\n                $this.toggleClass('active');\n                if ($this.hasClass('active')) {\n                    scope.$emit(\"list:li:active\", item, $this.parent().parent().parent().parent().parent().attr(\"position\"));\n                }\n                else {\n                    scope.$emit(\"list:li:inactive\", item, $this.parent().parent().parent().parent().parent().attr(\"position\"));\n                }\n            }\n        }\n    }\n});\n\ndirectives.directive('container', function() {\n    return {\n        restrict: 'EA',\n        templateUrl: '/partials/container.html',\n        link: function(scope, elem, attrs) {\n\n            scope.$watch('height', function(newVal, oldVal) {\n                elem.height(newVal);\n            });\n            scope.$watch('width', function(newVal, oldVal) {\n                elem.width(newVal);\n            });\n\n            var alignChildren = function() {\n                _.each(elem.children(), function(child) {\n                    var $child = $(child), height, width;\n                    switch ($child.attr('position')) {\n                        case 'middle':\n                            height = scope.height / 3;\n                            width  = scope.width / 3;\n                            // $child.attr(\"height\", height);\n                            // $child.attr(\"width\", width);\n                            $child.height(height);\n                            $child.width(width);\n                            $child.css('margin', -(height/2) + 'px 0 0 ' + -(width/2) + 'px');\n                            // $child.children('div').css('line-height', height + 'px');\n                            // $child.children('h1').css('line-height', height*0.7 + 'px');\n                            // $child.children('h3').css('line-height', height*0.3 + 'px');\n                            break;\n                        case 'top':\n                            height = scope.height / 3;\n                            // $child.attr(\"height\", height);\n                            // $child.attr(\"width\", width);\n                            $child.height(height);\n                            $child.width(scope.width);\n                            // $child.children('h1').css('line-height', height + 'px');\n                            break;\n                        case 'left':\n                        // $child.attr(\"height\", height);\n                        //     $child.attr(\"width\", width);\n                            $child.height(scope.height);\n                            $child.width(scope.width / 3);\n                            // $child.children('h1').css('line-height', scope.height + 'px');\n                            // var $li = $child.find('li');\n                            // $li.height(scope.height/$li.length);\n                            break;\n                        case 'bottom':\n                            height = scope.height / 3;\n                            // $child.attr(\"height\", height);\n                            // $child.attr(\"width\", width);\n                            $child.height(height);\n                            $child.width(scope.width);\n                            $child.css('top', (scope.height - height) + 'px');\n                            // $child.children('h1').css('line-height', height + 'px');\n                            break;\n                        case 'right':\n                            width = scope.width / 3;\n                            // $child.attr(\"height\", height);\n                            // $child.attr(\"width\", width);\n                            $child.height(scope.height);\n                            $child.width(width);\n                            $child.css('left', (scope.width - width) + 'px');\n                            // $child.children('h1').css('line-height', scope.height + 'px');\n                            // var $li = $child.find('li');\n                            // $li.height(scope.height/$li.length);\n                            break;\n                        default:\n                            break;\n                    }\n                });\n            }\n        }\n    };\n});\n\ndirectives.directive('resize', function($window, $rootScope) {\n    return function($scope) {\n        $scope.width  = $window.innerWidth;\n        $scope.height = $window.innerHeight;\n        angular.element($window).bind('resize', function() {\n            $scope.$apply(function() {\n                $scope.width  = $window.innerWidth;\n                $scope.height = $window.innerHeight;\n                $rootScope.$broadcast('windowResizeEventFired');\n            });\n        });\n    };\n});\n","/* Filters */\nvar filters = angular.module('mattlivingFilters', []);\n\nfilters.filter('interpolate', ['version', function(version) {\n  return function(text) {\n    return String(text).replace(/\\%VERSION\\%/mg, version);\n  }\n}]);","/* Services */\nvar services = angular.module('mattlivingServices', []);\n\nservices.value('version', '0.1');"]}